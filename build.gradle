plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.binn328'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation group: 'org.mockito', name: 'mockito-core', version: '5.13.0'
    runtimeOnly 'com.h2database:h2'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

// React 통합
def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
    main {
        resources {
            srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}

def reactBuildDir = "$frontendDir/build"

task installReact(type: Exec) {
    workingDir "$frontendDir"

    // 입력 파일 정의
    inputs.files fileTree("$frontendDir") {
        include 'package.json', 'package-lock.json'
    }

    // 출력 디렉토리 정의
    outputs.dir "$frontendDir/node_modules"

    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")) {
        commandLine "cmd", "/c", "npm audit fix && npm install"
    } else {
        commandLine "sh", "-c", "npm audit fix && npm install"
    }
}

task buildReact(type: Exec) {
    dependsOn installReact
    workingDir "$frontendDir"

    // 입력 디렉토리 정의 (소스 코드)
    inputs.dir "$frontendDir/src"

    // 출력 디렉토리 정의 (빌드 결과물)
    outputs.dir "$frontendDir/build"

    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "cmd", "/c", "npm run build"
    } else {
        commandLine "sh", "-c", "npm run build"
    }
}

task copyReactBuildFiles(type: Copy) {
    dependsOn buildReact
    from "$reactBuildDir"
    into "$projectDir/src/main/resources/static"

    // 입력 디렉토리 정의 (React 빌드 결과물)
    inputs.dir "$reactBuildDir"

    // 출력 디렉토리 정의 (Spring Boot 리소스)
    outputs.dir "$projectDir/src/main/resources/static"
}

build.dependsOn copyReactBuildFiles

// React 빌드 작업이 processResources에 의존하지 않도록 설정
processResources {
    // Remove dependency on copyReactBuildFiles if necessary
    // dependsOn "copyReactBuildFiles"
}

// React 빌드를 build 단계로 제한하여 테스트 시 React 빌드가 실행되지 않도록 함
